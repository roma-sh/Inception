[www]
listen = 0.0.0.0:9000

user = nobody
group = nobody

listen.owner = nobody
listen.group = nobody

pm = dynamic
pm.max_children = 5
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 3
catch_workers_output = yes


; [www] PHP-FPM POOL name:
; pool is a group of worker processes that handle PHP requests.
; Each pool runs independently and can have its own settings,
; like how many workers it has, which user it runs as, and which website it serves.


; listen = 9000:
; Originally, PHP-FPM listens on 127.0.0.1:9000 (localhost), but changing it to just
; 	9000 allows it to listen on all available network interfaces.
; This is useful in Docker when another container (like Nginx) needs to communicate with PHP-FPM.


; listen.owner = nobody
; listen.group = nobody
; nobody is a minimal-privilege user that exists in Linux, making it more secure than running as root.


; user = www-data
; group = www-data
; The PHP-FPM processes will run as www-data, which is the standard web server user in Linux.
; This prevents security risks by ensuring PHP scripts don't run as root.


; pm part:
; This section controls how PHP manages its worker processes.
; PHP-FPM handles multiple requests in parallel by using multiple PHP worker processes.
; These settings define how many workers PHP-FPM should start, keep, and create when needed.

; pm = dynamic
; automatically adjust the number of PHP worker processes based on the website’s traffic.

; pm.max_children = 5
; maximum number of PHP workers PHP-FPM can create
; If 5 users request a PHP page at the same time, each request will be processed immediately.
; If a 6th user comes while all workers are busy, their request will wait until a worker becomes free.
; Each worker consumes memory (RAM):
; If the number is too high, your server may run out of memory.
; If the number is too low, your website might be slow during high traffic.

; pm.start_servers = 2
; How Many Workers Start at Boot

; pm.min_spare_servers = 1
; At least 1 PHP worker must be idle (waiting for requests).
; If there are 0 idle workers, PHP-FPM will create a new worker (if max_children allows).
; Ensures that if a new user arrives, they don’t have to wait for a worker to be created.


; pm.max_spare_servers = 3
; PHP-FPM removes extra workers when they are not needed.
; If there are more than 3 idle workers, PHP-FPM will terminate the extra ones.
; Saves memory (RAM) when the website is not busy.

; Example Scenario
; Time	Active Users	Worker Processes	Action Taken
; 00:00	0 users			2 (start_servers)	2 workers waiting
; 00:10	1 user			2 workers			1 worker handles request, 1 is idle
; 00:20	5 users			5 workers			Max workers created (max_children = 5)
; 00:30	1 user			3 workers			2 extra workers removed (max_spare_servers = 3)
; 00:40	0 users			1 worker			2 more workers removed (min_spare_servers = 1)




; access.log = /var/log/php8/access.log
; slowlog = /var/log/php8/slow.log

; access.log records every request handled by PHP-FPM.
; that Helps debugging slow requests inside the container.

; slow.log logs scripts that take too long to execute, helping with performance debugging.
