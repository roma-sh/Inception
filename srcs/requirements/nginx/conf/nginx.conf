server {

	listen		443 ssl;
	server_name  rshatra.42.fr www.rshatra.42.fr;

	root	/var/www/;
	index index.php;

	ssl_certificate		/etc/nginx/ssl/rshatra.42.fr.crt;
	ssl_certificate_key /etc/nginx/ssl/rshatra.42.fr.key;
	ssl_protocols		TLSv1.2 TLSv1.3;
	ssl_session_timeout	10m;
	keepalive_timeout	70;


	location / {
		try_files $uri /index.php?$args;
		add_header Last-Modified $date_gmt;
		add_header Cache-Control 'no-store, no-cache';
		if_modified_since off;
		expires off;
		etag off;
	}

	location ~ \.php$ {
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		fastcgi_pass wordpress:9000;
		fastcgi_index index.php;
		include fastcgi_params;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_param PATH_INFO $fastcgi_path_info;
	}
}


# By default, NGINX doesn’t know what website to
# serve or which port to use. We use a configuration file to tell it:

# Which domain name to use (e.g., login.42.fr).

# Where the website files are stored (/var/www/html).

# How to handle PHP files (WordPress uses PHP).

# Whether to use HTTPS (SSL encryption).




#server { ... }: server block, which contains the configuration for a particular domain or set of domains.

# listen 443 ssl: This tells NGINX to listen on port 443, which is the standard port for HTTPS

# ssl: keyword indicates that the server should handle secure connections using SSL/TLS.

# server_name: Specifies the domain names for which this server block should respond

# root /var/www/;: Specifies the root directory for your website’s files. This is where
# NGINX will look for your web files

# index index.php index.html;: Defines the default files to serve when a directory is
# requested. If a user visits the root (/), NGINX will try to serve index.php first,
# and if it’s not found, it will try index.html.


# ssl_certificate /etc/nginx/ssl/rshatra.42.fr.crt;: Specifies the path to the SSL certificate file,
# which contains the public part of your SSL/TLS certificate. This allows NGINX to
# encrypt traffic to and from the server.

# ssl_certificate_key /etc/nginx/ssl/rshatra.42.fr.key;: Specifies the path to the SSL
# certificate private key file. This is used to decrypt the incoming encrypted traffic.

# ssl_protocols TLSv1.2 TLSv1.3;: Specifies the SSL/TLS protocols that are supported by the server.

# ssl_session_timeout 10m: This determines how long SSL session information is cached.
# SSL session caching refers to the practice of saving the details of a completed
# SSL handshake (the session) for a period of time, so that the client can reuse that
# session information for future connections to the same server.

# keepalive_timeout 70: Sets the timeout duration for keep-alive connections
# (persistent connections between the client and the server). This is set to 70 seconds.
# This means that NGINX will keep the connection open for 70 seconds after the initial request,
# allowing the client to send additional requests during that time without needing to open new connections.
# -------------------------------------------------------------------------------------------------------------
# location / { ... }: location block for the root of the website (i.e., /).
# This section handles how requests to the server are processed.



# $uri: This is the URI (the path or filename) that the client requested. For example, if the client
# asks for example.com/about, $uri will be /about.

# First Try ($uri): The server will first try to find the file that matches the exact path requested by the client. For example:

# If the client requests example.com/about, NGINX will try to find /var/www/html/about. If it exists, NGINX serves it directly.

# Second Try (/index.php?$args): If the requested file doesn't exist, it will try to load index.php instead.

# $args represents any query string parameters that might be included in the URL. For example, if the client asks for example.com/about?user=123, $args would be user=123. This allows the query parameters to be passed to index.php.

# Third Try (/index.html): If neither the requested file nor index.php exists, NGINX will serve the fallback file index.html as the last option.

# add_header Last-Modified $date_gmt;: Adds a Last-Modified header to the response with the current GMT time, which helps with cache control.

# add_header Cache-Control 'no-store, no-cache' : is telling the browser: Don't save this page: The browser should not store a copy of the page locally, so it won't be used again in the future.

# Always check for the latest version: Every time the page is requested, the browser should get a fresh version from the server, instead of using a previously saved (cached) copy.
# expires off;: Disables the expiration of the content, which also prevents caching.
# etag off;: Disables the ETag header, which is used for cache validation. Setting it to off ensures that the content isn't cached based on ETag.
